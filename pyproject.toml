[tool.poetry]
name = "tech-coach-stat"
version = "0.1.0"
description = "Example of how to produce statistics for meteorological data."
authors = ["arneso-ssb <81353974+arneso-ssb@users.noreply.github.com>"]
license = "MIT"
readme = "README.md"
# To include functions in Jupyter Notebooks from other parts of the directory tree,
# without using ProjectRoot from ssb-fagfunksjoner.
packages = [
    { include = "functions", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
dapla-toolbelt = ">=1.3.2"
ipykernel = ">=6.15.3"
python-dotenv = ">=1.0.1"
dynaconf = ">=3.2.6"
google-cloud-secret-manager = ">=2.21.1"

[tool.poetry.group.dev.dependencies]
black = {extras = ["jupyter"], version = ">=24.4.2"}
isort = ">=5.12.0"
mypy = ">=1.13.0"
pandas-stubs = ">=2.2.1.240316"
pre-commit = ">=3.3.1"
pre-commit-hooks = ">=4.4.0"
pytest = ">=7.1.3"
pytest-cov = ">=5.0.0"
pytest-mock = ">=3.14.0"
ruff = ">=0.0.284"
types-requests = ">=2.31.0.20240406"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
force_single_line = true
skip_gitignore = true
lines_after_imports = 2
# The line below is needed for jupyter notebooks stored as .py in percent format.
# See https://github.com/PyCQA/isort/issues/1338 for details
treat_comments_as_code = ["# %%"]

[tool.jupytext]
formats = "ipynb,auto:percent"
notebook_metadata_filter = "jupytext.text_representation,-jupytext.text_representation.jupytext_version,-widgets,-varInspector"
cell_metadata_filter = "-papermill,tags"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[[tool.mypy.overrides]]
module = [
    "dynaconf.*",
]
ignore_missing_imports = true

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py310"  # Minimum Python version supported
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    ".ipynb_checkpoints",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "A",    # prevent using keywords that clobber python builtins
    "ANN",  # check type annotations
    "B",    # bugbear: security warnings
    "D",    # documentation
    "E",    # pycodestyle
    "F",    # pyflakes
    "ISC",  # implicit string concatenation
#    "I",    # sort imports, commented out because sorted by isort.
    "UP",   # alert you when better syntax is available in your python version
    "RUF",  # the ruff developer's own rules
]
ignore = [
    "ANN202", # Don't requiere return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001",  # type annotations don't add value for test functions
    "ANN002",  # type annotations don't add value for test functions
    "ANN003",  # type annotations don't add value for test functions
    "ANN201",  # type annotations don't add value for test functions
    "ANN204",  # type annotations don't add value for test functions
    "ANN205",  # type annotations don't add value for test functions
    "ANN206",  # type annotations don't add value for test functions
    "D100",    # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "S101",    # asserts are encouraged in pytest
]
